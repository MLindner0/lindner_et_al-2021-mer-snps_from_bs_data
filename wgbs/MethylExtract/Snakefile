# Snakemake pipeline for SNP calling from four samples of wgbs data with BS-SNPer

# define wildcards
SAMPLE, = glob_wildcards("../../reseq/trimmed_data/{sample}.R1_val_1.fq.gz")
PARA = ["GQ", "QUAL"]

# constrain wildcard
wildcard_constraints:
    sample = '|'.join([re.escape(x) for x in SAMPLE]),
    para = '|'.join([re.escape(x) for x in PARA])


# pipeline
# set rule all
rule all:
    input:
        "SNP_calls/Diagnostics_DP.pdf",
        expand("RTG_{para}_{sample}_done.txt", sample=SAMPLE, para=PARA),
        expand("RTG_{para}_{sample}/weighted_roc.tsv", sample=SAMPLE, para=PARA),
        expand("SNP_calls/{sample}_SNPs_FP", sample=SAMPLE),
        expand("SNP_calls/{sample}_SNPs_FP_GT", sample=SAMPLE),
        expand("SNP_calls/{sample}_SNPs_FN", sample=SAMPLE)

# call SNPs
rule call:
    input:
        "alignments/{sample}/{sample}.Auto.bam"
    output:
        "SNP_calls/{sample}/SNVs.vcf"
    log:
        "logs/{sample}_call.log"
    conda:
        "../src/env_methylextract.yml"
    benchmark:
        "benchmarks/{sample}_call.benchmark.txt"
    threads: 8
    shell:
        "(MethylExtract.pl seq=../genome/genome.fa inDir=alignments/{wildcards.sample} flagW=99,147 flagC=83,163 varFraction=0.1 p=8 peOverlap=Y context=CG minDepthMeth=1 minDepthSNV=1 outDir=SNP_calls/{wildcards.sample} bedOut=Y) 2> {log}"

# make sure that only SNPs are selected
rule SelectSNPs:
    input:
        reference="../../reseq/genome/reference.fa",
        VCFs="SNP_calls/{sample}/SNVs.vcf"
    output:
        "SNP_calls/{sample}/SNPs.vcf"
    conda:
        "../../reseq/src/env_align.yml"
    log:
        "logs/{sample}_Select_SNPs.log"
    threads: 1
    shell:
        "(gatk SelectVariants -R {input.reference} -V {input.VCFs} --select-type-to-include SNP -restrict-alleles-to BIALLELIC -O {output}) 2> {log}"

# clean up vcf
rule RemoveN:
    input:
        "SNP_calls/{sample}/SNPs.vcf"
    output:
        "SNP_calls/{sample}/SNPsNoN.vcf"
    log:
        "logs/{sample}_SNPsNoN.log"
    threads: 1
    shell:
        """
        (awk -v OFS='\t' '{{ if(($4!="N")) {{ print }} }}' {input} > {output}) 2> {log}
        """

# extract SNPs (to make diagnostic plots in R)
rule ExtractSNPs:
    input:
        reference="../../reseq/genome/reference.fa",
        VCFs="SNP_calls/{sample}/SNPsNoN.vcf"
    output:
        "SNP_calls/{sample}_SNPs.table"
    conda:
        "../../reseq/src/env_align.yml"
    log:
        "logs/{sample}_ExtractSnps.log"
    threads: 1
    shell:
        "(gatk VariantsToTable -R {input.reference} -V {input.VCFs} -F CHROM -F POS -F QUAL -F QD -F DP -F MQ -F MQRankSum -F FS -F ReadPosRankSum -F SOR -GF GT -GF DP -GF GQ -O {output}) 2> {log}"

# make diagnostic plots in R
rule DiagnosticsSNPs:
    input:
        Script="Diagnostics_Variants.R",
        SNPs=expand("SNP_calls/{sample}_SNPs.table", sample=SAMPLE)
    output:
        "SNP_calls/Diagnostics_DP.pdf"
    conda:
        "../../reseq/src/env_plot.yml"
    log:
        "logs/DiagnosticsSnps.log"
    threads: 1
    shell:
        "(Rscript {input.Script}) 2> {log}"

# filter vcf file for depth (DP) of SNP positions
rule FilterDepth:
    input:
        reference="../../reseq/genome/reference.fa",
        VCFs="SNP_calls/{sample}/SNPsNoN.vcf"
    output:
        "SNP_calls/{sample}/SNPs_DPfilter.vcf"
    conda:
        "../../reseq/src/env_align.yml"
    log:
        "logs/{sample}_FilterDepth.log"
    threads: 1
    shell:
        "(gatk VariantFiltration -R {input.reference} -V {input.VCFs} -G-filter 'DP < 10 || DP > 120' -G-filter-name 'FAIL_DP' -O {output}) 2> {log}"

# set genotype of depth filtered SNP positions to 'no call'
rule SetNoCall:
    input:
        reference="../../reseq/genome/reference.fa",
        VCFs="SNP_calls/{sample}/SNPs_DPfilter.vcf"
    output:
        "SNP_calls/{sample}/SNPs_DPfilter_GT.vcf"
    conda:
        "../../reseq/src/env_align.yml"
    log:
        "logs/{sample}_FilterDepthNoCall.log"
    threads: 1
    shell:
        "(gatk VariantFiltration -R {input.reference} -V {input.VCFs} --set-filtered-genotype-to-no-call -O {output}) 2> {log}"

# only keep SNPs that pass quality check and are genotyped
rule FilterAgain:
    input:
        "SNP_calls/{sample}/SNPs_DPfilter_GT.vcf"
    output:
        "SNP_calls/{sample}/SNPs_Good.vcf"
    log:
        "logs/{sample}_Filter.log"
    threads: 1
    shell:
        """
        grep -E '^#|PASS' {input}  > SNP_calls/{wildcards.sample}.temp
        awk -v OFS='\t' 'substr($10,0,3)!="./."' SNP_calls/{wildcards.sample}.temp > {output}
        rm SNP_calls/{wildcards.sample}.temp
        """

# make vcf.gz (+index) for downstream processing
# first add sample name to header
rule VCFSample:
    input:
        "SNP_calls/{sample}/SNPs_Good.vcf"
    output:
        "SNP_calls/{sample}/SNPs_Good2.vcf"
    log:
        "logs/{sample}_vcfS.log"
    threads: 1
    shell:
        "(sed -e 's/NA0001/{wildcards.sample}/g' {input} > {output}) 2> {log}"

rule VCFgz:
    input:
        "SNP_calls/{sample}/SNPs_Good2.vcf"
    output:
        "SNP_calls/{sample}/SNPs_Good.vcf.gz"
    conda:
        "../src/env_bcftools.yml"
    log:
        "logs/{sample}_vcf1.log"
    threads: 1
    shell:
        "(bcftools view {input} -O z -o {output}) 2> {log}"

rule VCFgzIndex:
    input:
        "SNP_calls/{sample}/SNPs_Good.vcf.gz"
    output:
        "SNP_calls/{sample}/SNPs_Good.vcf.gz.tbi"
    conda:
        "../src/env_bcftools.yml"
    log:
        "logs/{sample}_vcf2.log"
    threads: 1
    shell:
        "(bcftools index -t {input}) 2> {log}"

# Downstream processing with RtgTools:
# run RtgTools vcf evaluation with variant quality (QUAL) score as score value
rule RTGQUAL:
    input:
        VCFs="SNP_calls/{sample}/SNPs_Good.vcf.gz",
        index="SNP_calls/{sample}/SNPs_Good.vcf.gz.tbi",
        base="../../reseq/variants/SNPs_{sample}.vcf.gz"
    output:
        "RTG_QUAL_{sample}_done.txt"
    conda:
        "../src/env_RTG.yml"
    log:
        "logs/{sample}_RTG.log"
    threads: 1
    shell:
        """
        (rtg vcfeval -b {input.base} -c {input.VCFs} -o RTG_QUAL_{wildcards.sample} -t ../../reseq/genome/reference --roc-subset snp --vcf-score-field=QUAL) 2> {log}
        touch {output}
        """

# get SNPs called as false negative SNPs
rule RTGFN:
    input:
        VCFs="RTG_QUAL_{sample}/fn.vcf.gz",
    output:
        "SNP_calls/{sample}_SNPs_FN"
    conda:
        "../src/env_bcftools.yml"
    log:
        "logs/{sample}_FN.log"
    threads: 1
    shell:
        "(bcftools query -f '%CHROM %POS %REF %ALT\n' {input} > {output}) 2> {log}"

# get SNPs called as false postive SNPs
rule RTGFP:
    input:
        VCFs="RTG_QUAL_{sample}/fp.vcf.gz",
    output:
        "SNP_calls/{sample}_SNPs_FP"
    conda:
        "../src/env_bcftools.yml"
    log:
        "logs/{sample}_FP.log"
    threads: 1
    shell:
        "(bcftools query -f '%CHROM %POS %REF %ALT\n' {input} > {output}) 2> {log}"

# get SNPs called as false postive SNPs while keeping genotype information
rule RTGFPGT:
    input:
        VCFs="RTG_QUAL_{sample}/fp.vcf.gz",
    output:
        "SNP_calls/{sample}_SNPs_FP_GT"
    conda:
        "../src/env_bcftools.yml"
    log:
        "logs/{sample}_FP_GT.log"
    threads: 1
    shell:
        "(bcftools query -f '%CHROM %POS %REF %ALT [%GT]\n' {input} > {output}) 2> {log}"

# run RtgTools vcf evaluation with genotype quality (GQ) score as score value
rule RTGGQ:
    input:
        VCFs="SNP_calls/{sample}/SNPs_Good.vcf.gz",
        index="SNP_calls/{sample}/SNPs_Good.vcf.gz.tbi",
        base="../../reseq/variants/SNPs_{sample}.vcf.gz"
    output:
        "RTG_GQ_{sample}_done.txt"
    conda:
        "../src/env_RTG.yml"
    log:
        "logs/{sample}_RTG.log"
    threads: 1
    shell:
        """
        (rtg vcfeval -b {input.base} -c {input.VCFs} -o RTG_GQ_{wildcards.sample} -t ../../reseq/genome/reference --roc-subset snp) 2> {log}
        touch {output}
        """

# make output readable
rule RTG:
    input:
        "RTG_{para}_{sample}/weighted_roc.tsv.gz"
    output:
        "RTG_{para}_{sample}/weighted_roc.tsv"
    log:
        "logs/{para}_{sample}_RTG.log"
    threads: 1
    shell:
        """
        (zcat {input} > {output}) 2> {log}
        """
