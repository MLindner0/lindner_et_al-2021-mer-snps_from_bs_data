# Snakemake pipeline for SNP calling from four samples of wgbs data with gemBS
# Note that gemBS constitutes a 'whole-pipeline' tool which inlcudes also the alignment

# define wildcards
SAMPLE, = glob_wildcards("trimmed_data/reseq2020_{sample}_R1_val_1.fq.gz")
RUN = ["seq2018", "reseq2020"]
PARA = ["GQ", "QUAL"]

# constrain wildcards
wildcard_constraints:
    sample = '|'.join([re.escape(x) for x in SAMPLE]),
    run = '|'.join([re.escape(x) for x in RUN]),
    para = '|'.join([re.escape(x) for x in PARA])


# pipeline
# set rule all
rule all:
    input:
        expand("alignments/{sample}.stats", sample=SAMPLE),
        expand("alignments/{sample}_AverageCoverage", sample=SAMPLE),
        "bcf/Diagnostics_DP_GQ.pdf",
        expand("RTG_{para}_{sample}_done.txt", sample=SAMPLE, para=PARA),
        expand("RTG_{para}_{sample}/weighted_roc.tsv", sample=SAMPLE, para=PARA),
        expand("bcf/{sample}_SNPs_FP", sample=SAMPLE),
        expand("bcf/{sample}_SNPs_FP_GT", sample=SAMPLE),
        expand("bcf/{sample}_SNPs_FN", sample=SAMPLE)

# build .json file
rule prep:
    input:
        Conf="conf",
        Meta="Metadata.csv"
    output:
        "gemBS.json"
    log:
        "logs/prepare.log"
    threads: 1
    shell:
        "(singularity exec --no-mount home --bind $HOME:$HOME gemBS_latest.sif gemBS prepare -c conf -t Metadata.csv -o gemBS.json --no-db) 2> {log}"

# build genome index
rule index:
    input:
        JSON="gemBS.json",
        Genome="/home/nioo/melaniel/projects/WGBS_rbc_reseq2020/genome/genome.fa"
    output:
        "index/genome.gemBS.ref"
    log:
        "logs/index.log"
    threads: 1
    shell:
        "(singularity exec --no-mount home --bind $HOME:$HOME gemBS_latest.sif gemBS index) 2> {log}"

# make alignments
rule align:
    input:
        JSON="gemBS.json",
        Index="index/genome.gemBS.ref",
        R1=expand("trimmed_data/{run}_{sample}_R1_val_1.fq.gz", sample=SAMPLE, run=RUN),
        R2=expand("trimmed_data/{run}_{sample}_R2_val_2.fq.gz", sample=SAMPLE, run=RUN)
    output:
        expand("alignments/{sample}.bam", sample=SAMPLE)
    log:
        "logs/align.log"
    benchmark:
        "benchmarks/align.benchmark.txt"
    threads: 20
    shell:
        "(singularity exec --no-mount home --bind $HOME:$HOME gemBS_latest.sif gemBS map) 2> {log}"

# get samtools alignment stats
rule stats:
    input:
        "alignments/{sample}.bam"
    output:
        "alignments/{sample}.stats"
    log:
        "logs/{sample}_align_stats.log"
    threads: 1
    shell:
        "(samtools flagstat {input} > {output}) 2> {log}"

# get coverage depth and breadth for alignments
rule coverage:
    input:
        "alignments/{sample}.bam"
    output:
        depth="alignments/{sample}_AverageCoverage",
        mpileup="alignments/{sample}_BasesCovered"
    conda:
        "../src/env_sam.yml"
    threads: 1
    shell:
        """
        samtools depth {input} | awk '{{sum+=$3}} END {{ print "Average = ",sum/NR}}' > {output.depth}
        MIN_COVERAGE_DEPTH=10
        samtools mpileup {input} | awk -v X="${{MIN_COVERAGE_DEPTH}}" '$4>=X' | wc -l > {output.mpileup}
        """

# call SNPs
rule call:
    input:
        JSON="gemBS.json",
        Align=expand("alignments/{sample}.bam", sample=SAMPLE)
    output:
        expand("bcf/{sample}.bcf", sample=SAMPLE)
    log:
        "logs/call.log"
    benchmark:
        "benchmarks/call.benchmark.txt"
    threads: 20
    shell:
        "(singularity exec --no-mount home --bind $HOME:$HOME gemBS_latest.sif gemBS call) 2> {log}"

# remove SNPs on Z chromosome and MT
rule split:
    input:
        BCF="bcf/{sample}.bcf",
        Regions="../chr_keep.bed"
    output:
        "bcf/{sample}.Auto.vcf"
    log:
        "logs/{sample}.split.log"
    conda:
        "../src/env_bcftools.yml"
    threads: 1
    shell:
        "(bcftools view {input.BCF} -R {input.Regions} --output-type v > {output}) 2> {log}"

# make sure that only SNPs are selected
rule SelectSNPs:
    input:
        reference="../../reseq/genome/reference.fa",
        VCFs="bcf/{sample}.Auto.vcf"
    output:
        "bcf/{sample}_SNPs.vcf"
    conda:
        "../../reseq/src/env_align.yml"
    log:
        "logs/{sample}_Select_SNPs.log"
    threads: 1
    shell:
        "(gatk SelectVariants -R {input.reference} -V {input.VCFs} --select-type-to-include SNP -restrict-alleles-to BIALLELIC -O {output}) 2> {log}"

# clean up vcf
rule RemoveN:
    input:
        "bcf/{sample}_SNPs.vcf"
    output:
        "bcf/{sample}_SNPsNoN.vcf"
    log:
        "logs/{sample}_SNPsNoN.log"
    threads: 1
    shell:
        """
        (awk -v OFS='\t' '{{ if(($4!="N")) {{ print }} }}' {input} > {output}) 2> {log}
        """

# extract SNPs (to make diagnostic plots in R)
rule ExtractSNPs:
    input:
        reference="../../reseq/genome/reference.fa",
        VCFs="bcf/{sample}_SNPsNoN.vcf"
    output:
        "bcf/{sample}_SNPs.table"
    conda:
        "../../reseq/src/env_align.yml"
    log:
        "logs/{sample}_ExtractSnps.log"
    threads: 1
    shell:
        "(gatk VariantsToTable -R {input.reference} -V {input.VCFs} -F CHROM -F POS -F QUAL -F QD -F DP -F MQ -F MQRankSum -F FS -F ReadPosRankSum -F SOR -GF GT -GF DP -GF GQ -O {output}) 2> {log}"

# make diagnostic plots in R
rule DiagnosticsSNPs:
    input:
        Script="Diagnostics_Variants.R",
        SNPs=expand("bcf/{sample}_SNPs.table", sample=SAMPLE)
    output:
        "bcf/Diagnostics_DP_GQ.pdf"
    conda:
        "../../reseq/src/env_plot.yml"
    log:
        "logs/DiagnosticsSnps.log"
    threads: 1
    shell:
        "(Rscript {input.Script}) 2> {log}"

# filter vcf file for depth (DP) of SNP positions
rule FilterDepth:
    input:
        reference="../../reseq/genome/reference.fa",
        VCFs="bcf/{sample}_SNPsNoN.vcf"
    output:
        "bcf/{sample}_SNPs_DPfilter.vcf"
    conda:
        "../../reseq/src/env_align.yml"
    log:
        "logs/{sample}_FilterDepth.log"
    threads: 1
    shell:
        "(gatk VariantFiltration -R {input.reference} -V {input.VCFs} -G-filter 'DP < 10 || DP > 92' -G-filter-name 'FAIL_DP' -O {output}) 2> {log}"

# set genotype of depth filtered SNP positions to 'no call'
rule SetNoCall:
    input:
        reference="../../reseq/genome/reference.fa",
        VCFs="bcf/{sample}_SNPs_DPfilter.vcf"
    output:
        "bcf/{sample}_SNPs_DPfilter_GT.vcf"
    conda:
        "../../reseq/src/env_align.yml"
    log:
        "logs/{sample}_FilterDepthNoCall.log"
    threads: 1
    shell:
        "(gatk VariantFiltration -R {input.reference} -V {input.VCFs} --set-filtered-genotype-to-no-call -O {output}) 2> {log}"

# only keep SNPs that pass quality check and are genotyped
rule FilterAgain:
    input:
        "bcf/{sample}_SNPs_DPfilter_GT.vcf"
    output:
        "bcf/{sample}_SNPs_Good.vcf"
    log:
        "logs/{sample}_Filter.log"
    threads: 1
    shell:
        """
        grep -E '^#|PASS' {input}  > bcf/{wildcards.sample}_temp
        awk -v OFS='\t' 'substr($10,0,3)!="./."' bcf/{wildcards.sample}_temp > {output}
        rm bcf/{wildcards.sample}_temp
        """

# make vcf.gz (+index) for downstream processing
rule VCFgz:
    input:
        "bcf/{sample}_SNPs_Good.vcf"
    output:
        "bcf/{sample}_SNPs_Good.vcf.gz"
    conda:
        "../src/env_bcftools.yml"
    log:
        "logs/{sample}_vcf1.log"
    threads: 1
    shell:
        "(bcftools view {input} -O z -o {output}) 2> {log}"

rule VCFgzIndex:
    input:
        "bcf/{sample}_SNPs_Good.vcf.gz"
    output:
        "bcf/{sample}_SNPs_Good.vcf.gz.tbi"
    conda:
        "../src/env_bcftools.yml"
    log:
        "logs/{sample}_vcf2.log"
    threads: 1
    shell:
        "(bcftools index -t {input}) 2> {log}"

# Downstream processing with RtgTools:
# run RtgTools vcf evaluation with variant quality (QUAL) score as score value
rule RTGQUAL:
    input:
        VCFs="bcf/{sample}_SNPs_Good.vcf.gz",
        index="bcf/{sample}_SNPs_Good.vcf.gz.tbi",
        base="../../reseq/variants/SNPs_{sample}.vcf.gz"
    output:
        "RTG_QUAL_{sample}_done.txt"
    conda:
        "../src/env_RTG.yml"
    log:
        "logs/{sample}_RTG.log"
    threads: 1
    shell:
        """
        (rtg vcfeval -b {input.base} -c {input.VCFs} -o RTG_QUAL_{wildcards.sample} -t ../../reseq/genome/reference --roc-subset snp --vcf-score-field=QUAL) 2> {log}
        touch {output}
        """

# get SNPs called as false negative SNPs
rule RTGFN:
    input:
        VCFs="RTG_QUAL_{sample}/fn.vcf.gz",
    output:
        "bcf/{sample}_SNPs_FN"
    conda:
        "../src/env_bcftools.yml"
    log:
        "logs/{sample}_FN.log"
    threads: 1
    shell:
        "(bcftools query -f '%CHROM %POS %REF %ALT\n' {input} > {output}) 2> {log}"

# get SNPs called as false postive SNPs
rule RTGFP:
    input:
        VCFs="RTG_QUAL_{sample}/fp.vcf.gz",
    output:
        "bcf/{sample}_SNPs_FP"
    conda:
        "../src/env_bcftools.yml"
    log:
        "logs/{sample}_FP.log"
    threads: 1
    shell:
        "(bcftools query -f '%CHROM %POS %REF %ALT\n' {input} > {output}) 2> {log}"

# get SNPs called as false postive SNPs while keeping genotype information
rule RTGFPGT:
    input:
        VCFs="RTG_QUAL_{sample}/fp.vcf.gz",
    output:
        "bcf/{sample}_SNPs_FP_GT"
    conda:
        "../src/env_bcftools.yml"
    log:
        "logs/{sample}_FP_GT.log"
    threads: 1
    shell:
        "(bcftools query -f '%CHROM %POS %REF %ALT [%GT]\n' {input} > {output}) 2> {log}"

# run RtgTools vcf evaluation with genotype quality (GQ) score as score value
rule RTGGQ:
    input:
        VCFs="bcf/{sample}_SNPs_Good.vcf.gz",
        index="bcf/{sample}_SNPs_Good.vcf.gz.tbi",
        base="../../reseq/variants/SNPs_{sample}.vcf.gz"
    output:
        "RTG_GQ_{sample}_done.txt"
    conda:
        "../src/env_RTG.yml"
    log:
        "logs/{sample}_RTG.log"
    threads: 1
    shell:
        """
        (rtg vcfeval -b {input.base} -c {input.VCFs} -o RTG_GQ_{wildcards.sample} -t ../../reseq/genome/reference --roc-subset snp) 2> {log}
        touch {output}
        """

# make output readable
rule RTG:
    input:
        "RTG_{para}_{sample}/weighted_roc.tsv.gz"
    output:
        "RTG_{para}_{sample}/weighted_roc.tsv"
    log:
        "logs/{para}_{sample}_RTG.log"
    threads: 1
    shell:
        """
        (zcat {input} > {output}) 2> {log}
        """
